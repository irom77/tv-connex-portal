"use strict";var ApplicationConfiguration=function(){var applicationModuleName="tv-connex-portal",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("connex"),ApplicationConfiguration.registerModule("core"),angular.module("connex").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Connex","connex","item")}]),angular.module("connex").config(["$stateProvider",function($stateProvider){$stateProvider.state("Connex",{url:"/connex",templateUrl:"modules/connex/views/test-connex.client.view.html"})}]),angular.module("connex").controller("ConnexController",["$scope","$stateParams","$location","Connex","Servers",function($scope,$stateParams,$location,Connex,Servers){$scope.status="Not Connected",$scope.hideServerInfo=!0,$scope.responseRecieved=!1,$scope.selectedServer={id:0,userName:"TVadmin",password:"tv",domain:"Default"},$scope.queryParams={query:null},Servers.list().$promise.then(function(servers){$scope.selectedServer=angular.extend($scope.selectedServer,servers[0]),$scope.servers=servers,$scope.connect()}),$scope.connect=function(){$scope.status="Connecting";var server=new Servers($scope.selectedServer);server.$connect({},function(response){$scope.connectResponse=angular.copy(response),$scope.status=response.statusCode&&200===response.statusCode?"Connected":"Not Connected",200===response.statusCode&&angular.isArray(response.body.Table)&&($scope.queries=response.body.Table.map(function(entry){return{query:entry.Query,description:entry.Description,uri:entry.Uri}}),$scope.queryParams.query=$scope.queries[0].query)})},$scope.showServerInfo=function(){$scope.hideServerInfo=!$scope.hideServerInfo},$scope.makeConnexQuery=function(queryParams){var params=angular.copy(queryParams);params.userName=$scope.selectedServer.userName,params.password=$scope.selectedServer.password,params.domain=$scope.selectedServer.domain,params.url=_.find($scope.servers,function(server){return server.id===$scope.selectedServer.id}).url;var connection=new Connex(params);connection.$makeQuery({},function(response){$scope.response=response,$scope.responseRecieved=!0})}}]),angular.module("connex").factory("Connex",["$resource",function($resource){return $resource("/connex",{},{makeQuery:{method:"POST"}})}]),angular.module("connex").factory("Servers",["$resource",function($resource){return $resource("/servers/:id",{id:"@id"},{list:{method:"GET",isArray:!0,url:"/servers"},connect:{method:"POST",url:"/servers/:id"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Menus",function($scope,Menus){$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope",function(){}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]);